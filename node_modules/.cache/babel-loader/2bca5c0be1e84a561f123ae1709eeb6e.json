{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sbrim\\\\OneDrive\\\\Documents\\\\GitHub\\\\critter\\\\src\\\\components\\\\Feeds\\\\HomeFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { COLORS } from \"../../accessories/constants\";\nimport { CreateNewPost } from \"../Posts/CreateNewPost\";\nimport { SmallPostFormat } from \"../Posts/SmallPostFormat\";\nimport { LoadingScreen } from \"../../accessories/LoadingScreen\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const HomeFeed = _ref => {\n  _s();\n  let {\n    currentUser\n  } = _ref;\n  let currentUserInfo = currentUser.profile;\n  const [tweetsById, setTweetsById] = useState(null);\n  const [tweetIds, setTweetIds] = useState(null);\n  const [reload, setReload] = useState(false);\n  useEffect(() => {\n    fetch(\"/api/me/home-feed\").then(res => res.json()).then(data => {\n      setTweetIds(data.tweetIds);\n      setTweetsById(data.tweetsById);\n    });\n  }, [reload]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(HeaderWrapper, {\n      children: /*#__PURE__*/_jsxDEV(HomeHeader, {\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), !tweetsById ? /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(HomeWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(CreateNewPost, {\n        currentUserInfo: currentUserInfo,\n        reload: reload,\n        setReload: setReload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MainFeedContainer, {\n        children: tweetIds.map(id => {\n          const {\n            timestamp,\n            status,\n            media,\n            retweetFrom,\n            author,\n            displayName,\n            handle,\n            isLiked,\n            isRetweeted,\n            numLikes,\n            numRetweets\n          } = tweetsById[id];\n          // setLikes(id.numLikes);\n          // console.log(likes);\n          return /*#__PURE__*/_jsxDEV(SmallPostFormat, {\n            id: id,\n            timestamp: timestamp,\n            status: status,\n            media: media,\n            retweetFrom: retweetFrom,\n            author: author,\n            handle: handle,\n            displayName: displayName,\n            isLiked: isLiked,\n            isRetweeted: isRetweeted,\n            numLikes: numLikes,\n            numRetweets: numRetweets\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(HomeFeed, \"bHciOb3R8NdubNriT/mPotlULH0=\");\n_c = HomeFeed;\nconst HomeWrapper = styled.div`\n  grid-area: mainContent;\n  max-height: 100vh;\n  max-width: 100vw;\n  display: flex;\n  background-color: ${COLORS.black};\n  flex-flow: column nowrap;\n  gap: 0.5rem;\n  border-top: none;\n  border-bottom: none;\n  overflow-x: visible;\n  overflow-y: scroll;\n  &&::-webkit-scrollbar {\n    display: none;\n  }\n`;\n_c2 = HomeWrapper;\nconst MainFeedContainer = styled.div`\n  display: flex;\n  flex-flow: column wrap;\n  background-color: ${COLORS.black};\n  color: ${COLORS.DesaturatedGreen};\n`;\n_c3 = MainFeedContainer;\nconst HomeHeader = styled.div`\n  border: 2px inset ${COLORS.DeepGreen};\n  margin-top: -0.5rem;\n  color: ${COLORS.offWhite2};\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-between;\n  align-content: center;\n  padding: 1rem;\n  height: 50px;\n  width: 100%;\n  background-color: #00000080;\n  backdrop-filter: blur(3px);\n  z-index: 10000;\n`;\n_c4 = HomeHeader;\nconst HeaderWrapper = styled.div`\n  width: 100%;\n  height: 3.5rem;\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden;\n  grid-area: mainContent;\n  box-shadow: inset 0 0 10px #000000;\n`;\n_c5 = HeaderWrapper;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"HomeFeed\");\n$RefreshReg$(_c2, \"HomeWrapper\");\n$RefreshReg$(_c3, \"MainFeedContainer\");\n$RefreshReg$(_c4, \"HomeHeader\");\n$RefreshReg$(_c5, \"HeaderWrapper\");","map":{"version":3,"names":["React","useContext","useEffect","useState","styled","COLORS","CreateNewPost","SmallPostFormat","LoadingScreen","HomeFeed","currentUser","currentUserInfo","profile","tweetsById","setTweetsById","tweetIds","setTweetIds","reload","setReload","fetch","then","res","json","data","map","id","timestamp","status","media","retweetFrom","author","displayName","handle","isLiked","isRetweeted","numLikes","numRetweets","HomeWrapper","div","black","MainFeedContainer","DesaturatedGreen","HomeHeader","DeepGreen","offWhite2","HeaderWrapper"],"sources":["C:/Users/sbrim/OneDrive/Documents/GitHub/critter/src/components/Feeds/HomeFeed.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { COLORS } from \"../../accessories/constants\";\r\nimport { CreateNewPost } from \"../Posts/CreateNewPost\";\r\n\r\nimport { SmallPostFormat } from \"../Posts/SmallPostFormat\";\r\nimport { LoadingScreen } from \"../../accessories/LoadingScreen\";\r\n\r\nexport const HomeFeed = ({ currentUser }) => {\r\n  let currentUserInfo = currentUser.profile;\r\n  const [tweetsById, setTweetsById] = useState(null);\r\n  const [tweetIds, setTweetIds] = useState(null);\r\n\r\n  const [reload, setReload] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/api/me/home-feed\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setTweetIds(data.tweetIds);\r\n        setTweetsById(data.tweetsById);\r\n      });\r\n  }, [reload]);\r\n\r\n  return (\r\n    <>\r\n      <HeaderWrapper>\r\n        <HomeHeader>Home</HomeHeader>\r\n      </HeaderWrapper>\r\n      {!tweetsById ? (\r\n        <LoadingScreen />\r\n      ) : (\r\n        <HomeWrapper>\r\n          <CreateNewPost\r\n            currentUserInfo={currentUserInfo}\r\n            reload={reload}\r\n            setReload={setReload}\r\n          />\r\n          <MainFeedContainer>\r\n            {tweetIds.map((id) => {\r\n              const {\r\n                timestamp,\r\n                status,\r\n                media,\r\n                retweetFrom,\r\n                author,\r\n                displayName,\r\n                handle,\r\n                isLiked,\r\n                isRetweeted,\r\n                numLikes,\r\n                numRetweets,\r\n              } = tweetsById[id];\r\n              // setLikes(id.numLikes);\r\n              // console.log(likes);\r\n              return (\r\n                <SmallPostFormat\r\n                  id={id}\r\n                  timestamp={timestamp}\r\n                  status={status}\r\n                  media={media}\r\n                  retweetFrom={retweetFrom}\r\n                  author={author}\r\n                  handle={handle}\r\n                  displayName={displayName}\r\n                  isLiked={isLiked}\r\n                  isRetweeted={isRetweeted}\r\n                  numLikes={numLikes}\r\n                  numRetweets={numRetweets}\r\n                />\r\n              );\r\n            })}\r\n          </MainFeedContainer>\r\n        </HomeWrapper>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst HomeWrapper = styled.div`\r\n  grid-area: mainContent;\r\n  max-height: 100vh;\r\n  max-width: 100vw;\r\n  display: flex;\r\n  background-color: ${COLORS.black};\r\n  flex-flow: column nowrap;\r\n  gap: 0.5rem;\r\n  border-top: none;\r\n  border-bottom: none;\r\n  overflow-x: visible;\r\n  overflow-y: scroll;\r\n  &&::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst MainFeedContainer = styled.div`\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n  background-color: ${COLORS.black};\r\n  color: ${COLORS.DesaturatedGreen};\r\n`;\r\nconst HomeHeader = styled.div`\r\n  border: 2px inset ${COLORS.DeepGreen};\r\n  margin-top: -0.5rem;\r\n  color: ${COLORS.offWhite2};\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  justify-content: space-between;\r\n  align-content: center;\r\n  padding: 1rem;\r\n  height: 50px;\r\n  width: 100%;\r\n  background-color: #00000080;\r\n  backdrop-filter: blur(3px);\r\n  z-index: 10000;\r\n`;\r\nconst HeaderWrapper = styled.div`\r\n  width: 100%;\r\n  height: 3.5rem;\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  overflow: hidden;\r\n  grid-area: mainContent;\r\n  box-shadow: inset 0 0 10px #000000;\r\n`;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}