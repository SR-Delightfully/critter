[{"C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\index.js":"1","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\App.js":"2","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\CurrentUserContext.js":"3","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\TweetDetails.js":"4","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Notifications.js":"5","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Bookmarks.js":"6","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\SideBar.js":"7","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Profile.js":"8","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\accessories\\GlobalStyles.js":"9","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\accessories\\LoadingScreen.js":"10","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Feeds\\HomeFeed.js":"11","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Posts\\LargePostFormat.js":"12","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\accessories\\constants.js":"13","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\accessories\\Button.js":"14","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\accessories\\Logo.js":"15","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Posts\\SmallPostFormat.js":"16","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Posts\\CreateNewPost.js":"17","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Posts\\Post_BuildingBlocks\\PostContent.js":"18","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Posts\\Post_BuildingBlocks\\PostActions.js":"19","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Posts\\Post_BuildingBlocks\\Avatar.js":"20","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Posts\\Post_BuildingBlocks\\NewPostActions.js":"21"},{"size":318,"mtime":1659440541220,"results":"22","hashOfConfig":"23"},{"size":2122,"mtime":1663798353895,"results":"24","hashOfConfig":"23"},{"size":785,"mtime":1662992221316,"results":"25","hashOfConfig":"23"},{"size":2619,"mtime":1667232801080,"results":"26","hashOfConfig":"23"},{"size":1062,"mtime":1661374713317,"results":"27","hashOfConfig":"23"},{"size":128,"mtime":1659409240320,"results":"28","hashOfConfig":"23"},{"size":2251,"mtime":1667232791265,"results":"29","hashOfConfig":"23"},{"size":6227,"mtime":1667232783041,"results":"30","hashOfConfig":"23"},{"size":2191,"mtime":1659669320330,"results":"31","hashOfConfig":"23"},{"size":1339,"mtime":1663800425007,"results":"32","hashOfConfig":"23"},{"size":3438,"mtime":1667232805896,"results":"33","hashOfConfig":"23"},{"size":2168,"mtime":1667232827356,"results":"34","hashOfConfig":"23"},{"size":476,"mtime":1659669921803,"results":"35","hashOfConfig":"23"},{"size":713,"mtime":1663788943482,"results":"36","hashOfConfig":"23"},{"size":385,"mtime":1662949850813,"results":"37","hashOfConfig":"23"},{"size":2535,"mtime":1667232849530,"results":"38","hashOfConfig":"23"},{"size":3072,"mtime":1667232815520,"results":"39","hashOfConfig":"23"},{"size":952,"mtime":1663801275647,"results":"40","hashOfConfig":"23"},{"size":2441,"mtime":1663791655870,"results":"41","hashOfConfig":"23"},{"size":792,"mtime":1663764973502,"results":"42","hashOfConfig":"23"},{"size":1414,"mtime":1661370619592,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3a5i45",{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\index.js",[],[],"C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\App.js",["117","118","119","120","121"],[],"import React, { useContext, useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport GlobalStyles from \"./accessories/GlobalStyles\";\n// importing components:\nimport { HomeFeed } from \"./components/Feeds/HomeFeed\";\nimport { Notifications } from \"./components/Notifications\";\nimport { Bookmarks } from \"./components/Bookmarks\";\nimport { Profile } from \"./components/Profile\";\nimport { SideBar } from \"./components/SideBar\";\nimport TweetDetails from \"./components/TweetDetails\";\nimport {\n  CurrentUserContext,\n  HomeFeedContext,\n} from \"./components/CurrentUserContext\";\nimport { LoadingScreen } from \"./accessories/LoadingScreen\";\nimport { LargePostFormat } from \"./components/Posts/LargePostFormat\";\n\n// ***ALL of the work for this project will be done in the 'client' folder.\n\nconst App = (props) => {\n  const { currentUser } = useContext(CurrentUserContext);\n\n  return (\n    <>\n      {!currentUser ? (\n        <LoadingScreen />\n      ) : (\n        <MainApplication>\n          <GlobalStyles />\n          <Router>\n            <SideBar className=\"sideBar\" />\n            <Switch>\n              <Route exact path=\"/\">\n                <HomeFeed currentUser={currentUser} />\n              </Route>\n\n              <Route exact path=\"/notifications\">\n                <Notifications />\n              </Route>\n\n              <Route exact path=\"/bookmarks\">\n                <Bookmarks />\n              </Route>\n\n              <Route path=\"/tweet/:tweetId\">\n                {/* <LargePostFormat currentUser={currentUser} /> */}\n                <TweetDetails />\n              </Route>\n\n              {/* <Route path=\"/:profileId\"> */}\n              <Route path=\"/:handle\">\n                <Profile currentUser={currentUser} />\n              </Route>\n            </Switch>\n          </Router>\n        </MainApplication>\n      )}\n    </>\n  );\n};\n\nconst MainApplication = styled.div`\n  display: grid;\n  grid-template-columns: 1.75fr 2.5fr 2.25fr;\n  grid-template-areas: \"sideBar mainContent sideContent\";\n`;\n\nexport default App;\n","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\CurrentUserContext.js",[],[],"C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\TweetDetails.js",["122"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { COLORS } from \"../accessories/constants\";\r\n// import { Avatar } from \"./Posts/Post_BuildingBlocks/Avatar\";\r\n// import { PostActions } from \"./Posts/Post_BuildingBlocks/PostActions\";\r\n// import { PostContent } from \"./Posts/Post_BuildingBlocks/PostContent\";\r\nimport { LargePostFormat } from \"./Posts/LargePostFormat\";\r\nimport { LoadingScreen } from \"../accessories/LoadingScreen\";\r\n\r\nexport const TweetDetails = () => {\r\n  const { tweetId } = useParams();\r\n\r\n  const [viewedTweet, setViewedTweet] = useState(null);\r\n  useEffect(() => {\r\n    fetch(`/api/tweet/${tweetId}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setViewedTweet(data.tweet);\r\n      });\r\n  }, []);\r\n  return (\r\n    <>\r\n      {!viewedTweet ? (\r\n        <LoadingScreen />\r\n      ) : (\r\n        <TweetDetailsWrapper>\r\n          <HeaderWrapper>\r\n            <TweetHeader>Tweet</TweetHeader>\r\n          </HeaderWrapper>\r\n          <LargePostFormat\r\n            id={viewedTweet.id}\r\n            timestamp={viewedTweet.timestamp}\r\n            status={viewedTweet.status}\r\n            media={viewedTweet.media}\r\n            retweetFrom={viewedTweet.retweetFrom}\r\n            author={viewedTweet.author}\r\n            isLiked={viewedTweet.isLiked}\r\n            isRetweeted={viewedTweet.isRetweeted}\r\n            numLikes={viewedTweet.numLikes}\r\n            numRetweets={viewedTweet.numRetweets}\r\n          />\r\n        </TweetDetailsWrapper>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst TweetDetailsWrapper = styled.div`\r\n  grid-area: mainContent;\r\n  max-height: 100vh;\r\n  max-width: 100vw;\r\n  display: flex;\r\n  background-color: ${COLORS.black};\r\n  flex-flow: column nowrap;\r\n  gap: 0.5rem;\r\n  border-top: none;\r\n  border-bottom: none;\r\n  overflow-x: visible;\r\n  overflow-y: scroll;\r\n  &&::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\nconst TweetHeader = styled.div`\r\n  border: 2px inset ${COLORS.DeepGreen};\r\n  margin-top: -0.5rem;\r\n  color: ${COLORS.offWhite2};\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  justify-content: space-between;\r\n  align-content: center;\r\n  padding: 1rem;\r\n  height: 50px;\r\n  width: 100%;\r\n  background-color: #00000080;\r\n  backdrop-filter: blur(3px);\r\n  z-index: 1;\r\n`;\r\nconst HeaderWrapper = styled.div`\r\n  width: 100%;\r\n  height: 3.5rem;\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  overflow: hidden;\r\n  grid-area: mainContent;\r\n  box-shadow: inset 0 0 10px #000000;\r\n`;\r\n\r\nexport default TweetDetails;\r\n","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Notifications.js",[],[],"C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Bookmarks.js",[],[],"C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\SideBar.js",["123"],[],"import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport {\r\n  TiHomeOutline,\r\n  TiUserOutline,\r\n  TiBell,\r\n  TiBookmark,\r\n} from \"react-icons/ti\";\r\nimport { COLORS } from \"../accessories/constants\";\r\nimport { Logo } from \"../accessories/Logo\";\r\nimport { Button } from \"../accessories/Button\";\r\nimport { CurrentUserContext } from \"./CurrentUserContext\";\r\n\r\nexport const SideBar = () => {\r\n  const profile = useContext(CurrentUserContext).currentUser.profile;\r\n  const history = useHistory();\r\n  return (\r\n    <SidebarWrapper className=\"sidebar\">\r\n      <Logo />\r\n      <Nav\r\n        onClick={(event) => {\r\n          history.push(\"/\");\r\n        }}\r\n      >\r\n        <TiHomeOutline size={32} /> Home\r\n      </Nav>\r\n      <Nav\r\n        onClick={(event) => {\r\n          history.push(`/${profile.handle}`);\r\n        }}\r\n      >\r\n        <TiUserOutline size={32} /> Profile\r\n      </Nav>\r\n      <Nav\r\n        onClick={(event) => {\r\n          history.push(\"/notifications\");\r\n        }}\r\n      >\r\n        <TiBell size={32} /> Notifications\r\n      </Nav>\r\n      <Nav\r\n        onClick={(event) => {\r\n          history.push(\"/bookmarks\");\r\n        }}\r\n      >\r\n        <TiBookmark size={32} /> Bookmarks\r\n      </Nav>\r\n      <Button />\r\n    </SidebarWrapper>\r\n  );\r\n};\r\n\r\n// Only Styled Components below here ⤵\r\n\r\nconst SidebarWrapper = styled.div`\r\n  border-right: 1px solid ${COLORS.DeepGreen};\r\n  grid-area: sideBar;\r\n  height: 100vh;\r\n  float: left;\r\n  background-color: ${COLORS.offBlack};\r\n\r\n  display: flex;\r\n  align-items: flex-start;\r\n  align-content: flex-end;\r\n  flex-direction: column;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n`;\r\nconst Nav = styled.div`\r\n  border: 1px solid transparent;\r\n  color: ${COLORS.DullGreen};\r\n  padding: 5px 10px 5px 10px;\r\n  border-radius: 25px;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.75rem;\r\n  &.active {\r\n    text-decoration: underline;\r\n    text-decoration-thickness: 0.1rem;\r\n    text-decoration-color: ${COLORS.textActive};\r\n    color: ${COLORS.BrightGreen};\r\n  }\r\n  &:hover {\r\n    background-color: ${COLORS.black};\r\n    border: 1px solid #000;\r\n    color: ${COLORS.tangerine};\r\n    transition: 0.75s;\r\n  }\r\n`;\r\n","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Profile.js",["124","125","126","127","128","129"],[],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  TiArrowLeftThick,\r\n  TiLocation,\r\n  TiLink,\r\n  TiGift,\r\n  TiCalendar,\r\n} from \"react-icons/ti\";\r\nimport { COLORS } from \"../accessories/constants\";\r\nimport { CurrentUserContext } from \"./CurrentUserContext\";\r\nimport { LoadingScreen } from \"../accessories/LoadingScreen\";\r\nimport { SmallPostFormat } from \"./Posts/SmallPostFormat\";\r\n\r\nexport const Profile = () => {\r\n  const { handle } = useParams();\r\n\r\n  // const [usersTweets, setUsersTweets] = useState([]);\r\n\r\n  const [tweetsById, setTweetsById] = useState(null);\r\n  const [tweetIds, setTweetIds] = useState(null);\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(`/api/${handle}/feed`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setTweetIds(data.tweetIds);\r\n        setTweetsById(data.tweetsById);\r\n      });\r\n  }, [handle]);\r\n  useEffect(() => {\r\n    fetch(`/api/${handle}/profile`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setUser(data.profile);\r\n      });\r\n  }, [handle]);\r\n\r\n  return (\r\n    <>\r\n      {!user ? (\r\n        <LoadingScreen />\r\n      ) : (\r\n        <>\r\n          <HeaderWrapper>\r\n            <ProfileHeader>{user.handle}</ProfileHeader>\r\n          </HeaderWrapper>\r\n          <ProfileWrapper>\r\n            <UserCard className=\"userCard\">\r\n              {/* User's Avatar */}\r\n              <UserBanner src={user.bannerSrc} />\r\n              <UserAvatar src={user.avatarSrc} />\r\n\r\n              {/* User's Information */}\r\n              <UserInfo>\r\n                <h1>{user.displayName}</h1>\r\n                <h2>@{user.handle}</h2>\r\n                <p>{user.bio}</p>\r\n              </UserInfo>\r\n              <Extras>\r\n                <ExtraUserInfo>\r\n                  <p>\r\n                    <TiLocation />\r\n                    {user.location}\r\n                  </p>\r\n                  <p>\r\n                    <TiCalendar />\r\n                    {user.joined}\r\n                  </p>\r\n                </ExtraUserInfo>\r\n                {/* Following/Followers? */}\r\n                <ExtraData>\r\n                  <p>{user.numFollowing} Following</p>\r\n                  <p>{user.numFollowers} Followers</p>\r\n                </ExtraData>\r\n              </Extras>\r\n            </UserCard>\r\n            <TweetsContainer>\r\n              {tweetIds.map((id) => {\r\n                const {\r\n                  timestamp,\r\n                  status,\r\n                  media,\r\n                  retweetFrom,\r\n                  author,\r\n                  isLiked,\r\n                  isRetweeted,\r\n                  numLikes,\r\n                  numRetweets,\r\n                } = tweetsById[id];\r\n\r\n                return (\r\n                  <SmallPostFormat\r\n                    id={id}\r\n                    timestamp={timestamp}\r\n                    status={status}\r\n                    media={media}\r\n                    retweetFrom={retweetFrom}\r\n                    author={author}\r\n                    isLiked={isLiked}\r\n                    usRetweeted={isRetweeted}\r\n                    numLikes={numLikes}\r\n                    numRetweets={numRetweets}\r\n                  />\r\n                );\r\n              })}\r\n            </TweetsContainer>\r\n          </ProfileWrapper>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nconst UserCard = styled.div`\r\n  min-height: 35rem;\r\n  width: 100%;\r\n  border: 1px solid ${COLORS.DeepGreen};\r\n  overflow: hidden;\r\n  color: ${COLORS.DesaturatedGreen};\r\n  background-color: ${COLORS.offBlack};\r\n  display: block;\r\n`;\r\n\r\nconst ReturnButton = styled.button`\r\n  height: 50px;\r\n  width: 50px;\r\n  margin-right: 0.5rem;\r\n  background-color: ${COLORS.offBlack};\r\n  border: 1px solid ${COLORS.DullGreen};\r\n  &:hover {\r\n    background-color: ${COLORS.orange};\r\n    color: ${COLORS.DeepOrange};\r\n    border: 1px solid ${COLORS.DeepOrange};\r\n  }\r\n`;\r\nconst UserBanner = styled.img`\r\n  background-size: cover;\r\n  border-bottom: 2px solid ${COLORS.DeepGreen};\r\n  height: 20vmax;\r\n  z-index: -9999;\r\n  background-color: ${COLORS.transparent};\r\n`;\r\nconst UserAvatar = styled.img`\r\n  background-size: cover;\r\n  border: 5px solid ${COLORS.offBlack};\r\n  border-radius: 100%;\r\n  height: 8rem;\r\n  width: 8rem;\r\n  margin-top: -4rem;\r\n  margin-left: 4rem;\r\n  background-color: ${COLORS.transparent};\r\n  z-index: 100;\r\n`;\r\nconst UserInfo = styled.div`\r\n  border: 1px solid ${COLORS.DeepGreen};\r\n  padding-left: 1rem;\r\n  z-index: 0;\r\n  padding-top: 1rem;\r\n  & > p {\r\n    font-size: 18px;\r\n    padding-top: 1rem;\r\n  }\r\n  & > h1 {\r\n    color: ${COLORS.offWhite};\r\n  }\r\n  & > h2 {\r\n    color: ${COLORS.offWhite4};\r\n  }\r\n`;\r\n\r\nconst Extras = styled.div`\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  gap: 1rem;\r\n  & > div {\r\n    font-size: 18px;\r\n    font-family: monospace;\r\n    color: ${COLORS.DullGreen};\r\n    gap: 1rem;\r\n  }\r\n`;\r\nconst ExtraData = styled.div`\r\n  display: flex;\r\n`;\r\nconst ExtraUserInfo = styled.div`\r\n  display: flex;\r\n  gap: 1rem;\r\n`;\r\n\r\nconst TweetsContainer = styled.div`\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n  background-color: ${COLORS.black};\r\n  color: ${COLORS.DesaturatedGreen};\r\n`;\r\n\r\nconst ProfileWrapper = styled.div`\r\n  grid-area: mainContent;\r\n  max-height: 100vh;\r\n  max-width: 100vw;\r\n  display: flex;\r\n  background-color: ${COLORS.black};\r\n  flex-flow: column nowrap;\r\n  gap: 1rem;\r\n  border-top: none;\r\n  border-bottom: none;\r\n  overflow-x: visible;\r\n  overflow-y: scroll;\r\n  &&::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst ProfileHeader = styled.div`\r\n  border: 2px inset ${COLORS.DeepGreen};\r\n  margin-top: -0.5rem;\r\n  color: ${COLORS.offWhite2};\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  justify-content: space-between;\r\n  align-content: center;\r\n  padding: 1rem;\r\n  height: 50px;\r\n  width: 100%;\r\n  background-color: #00000080;\r\n  backdrop-filter: blur(3px);\r\n  z-index: 999999;\r\n`;\r\nconst HeaderWrapper = styled.div`\r\n  width: 100%;\r\n  height: 3.5rem;\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  overflow: hidden;\r\n  grid-area: mainContent;\r\n  box-shadow: inset 0 0 10px #000000;\r\n`;\r\n","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\accessories\\GlobalStyles.js",[],[],"C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\accessories\\LoadingScreen.js",[],[],"C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Feeds\\HomeFeed.js",["130"],[],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { COLORS } from \"../../accessories/constants\";\r\nimport { CreateNewPost } from \"../Posts/CreateNewPost\";\r\n\r\nimport { SmallPostFormat } from \"../Posts/SmallPostFormat\";\r\nimport { LoadingScreen } from \"../../accessories/LoadingScreen\";\r\n\r\nexport const HomeFeed = ({ currentUser }) => {\r\n  let currentUserInfo = currentUser.profile;\r\n  const [tweetsById, setTweetsById] = useState(null);\r\n  const [tweetIds, setTweetIds] = useState(null);\r\n\r\n  const [reload, setReload] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/api/me/home-feed\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setTweetIds(data.tweetIds);\r\n        setTweetsById(data.tweetsById);\r\n      });\r\n  }, [reload]);\r\n\r\n  return (\r\n    <>\r\n      <HeaderWrapper>\r\n        <HomeHeader>Home</HomeHeader>\r\n      </HeaderWrapper>\r\n      {!tweetsById ? (\r\n        <LoadingScreen />\r\n      ) : (\r\n        <HomeWrapper>\r\n          <CreateNewPost\r\n            currentUserInfo={currentUserInfo}\r\n            reload={reload}\r\n            setReload={setReload}\r\n          />\r\n          <MainFeedContainer>\r\n            {tweetIds.map((id) => {\r\n              const {\r\n                timestamp,\r\n                status,\r\n                media,\r\n                retweetFrom,\r\n                author,\r\n                displayName,\r\n                handle,\r\n                isLiked,\r\n                isRetweeted,\r\n                numLikes,\r\n                numRetweets,\r\n              } = tweetsById[id];\r\n              // setLikes(id.numLikes);\r\n              return (\r\n                <SmallPostFormat\r\n                  id={id}\r\n                  timestamp={timestamp}\r\n                  status={status}\r\n                  media={media}\r\n                  retweetFrom={retweetFrom}\r\n                  author={author}\r\n                  handle={handle}\r\n                  displayName={displayName}\r\n                  isLiked={isLiked}\r\n                  isRetweeted={isRetweeted}\r\n                  numLikes={numLikes}\r\n                  numRetweets={numRetweets}\r\n                />\r\n              );\r\n            })}\r\n          </MainFeedContainer>\r\n        </HomeWrapper>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst HomeWrapper = styled.div`\r\n  grid-area: mainContent;\r\n  max-height: 100vh;\r\n  max-width: 100vw;\r\n  display: flex;\r\n  background-color: ${COLORS.black};\r\n  flex-flow: column nowrap;\r\n  gap: 0.5rem;\r\n  border-top: none;\r\n  border-bottom: none;\r\n  overflow-x: visible;\r\n  overflow-y: scroll;\r\n  &&::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst MainFeedContainer = styled.div`\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n  background-color: ${COLORS.black};\r\n  color: ${COLORS.DesaturatedGreen};\r\n`;\r\nconst HomeHeader = styled.div`\r\n  border: 2px inset ${COLORS.DeepGreen};\r\n  margin-top: -0.5rem;\r\n  color: ${COLORS.offWhite2};\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  justify-content: space-between;\r\n  align-content: center;\r\n  padding: 1rem;\r\n  height: 50px;\r\n  width: 100%;\r\n  background-color: #00000080;\r\n  backdrop-filter: blur(3px);\r\n  z-index: 10000;\r\n`;\r\nconst HeaderWrapper = styled.div`\r\n  width: 100%;\r\n  height: 3.5rem;\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  overflow: hidden;\r\n  grid-area: mainContent;\r\n  box-shadow: inset 0 0 10px #000000;\r\n`;\r\n","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Posts\\LargePostFormat.js",["131"],[],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { PostActions } from \"./Post_BuildingBlocks/PostActions\";\r\nimport { PostContent } from \"./Post_BuildingBlocks/PostContent\";\r\nimport { Avatar } from \"./Post_BuildingBlocks/Avatar\";\r\nimport { COLORS } from \"../../accessories/constants\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nexport const LargePostFormat = ({\r\n  id,\r\n  timestamp,\r\n  status,\r\n  media,\r\n  retweetFrom,\r\n  author,\r\n  displayName,\r\n  handle,\r\n  isLiked,\r\n  isRetweeted,\r\n  numLikes,\r\n  numRetweets,\r\n}) => {\r\n  const history = useHistory();\r\n\r\n  const [likes, setLikes] = useState(0);\r\n  const [liked, setLiked] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    console.log(\"you liked this!!\");\r\n    if (!liked) {\r\n      setLikes(likes + 1);\r\n      setLiked(!liked);\r\n    } else {\r\n      setLikes(likes - 1);\r\n      setLiked(!liked);\r\n    }\r\n  };\r\n  return (\r\n    <LargePostWrapper>\r\n      <User>\r\n        <Avatar author={author} />\r\n        <div\r\n          onClick={(event) => {\r\n            event.stopPropagation();\r\n            history.push(`/${author.handle}`);\r\n          }}\r\n        >\r\n          <h1>{author.displayName}</h1>\r\n          <h2>@{author.handle}</h2>\r\n        </div>\r\n        <h2>{author.timestamp}</h2>\r\n      </User>\r\n      <PostContent status={status} media={media} />\r\n      <PostActions\r\n        id={id}\r\n        likes={likes}\r\n        isLiked={isLiked}\r\n        handleClick={handleClick}\r\n      />\r\n    </LargePostWrapper>\r\n  );\r\n};\r\n\r\nconst LargePostWrapper = styled.div`\r\n  border: 2px inset ${COLORS.black};\r\n  min-height: 25vh;\r\n  max-width: 100%;\r\n  gap: 1rem;\r\n  padding: 0.5rem 1rem 0.5rem 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  &&:hover {\r\n    cursor: pointer;\r\n    background-color: #00000080;\r\n    transition: background-color 2s ease;\r\n  }\r\n`;\r\nconst User = styled.div`\r\n  /* border: 2px inset ${COLORS.black}; */\r\n  color: ${COLORS.offWhite4};\r\n  max-width: 100vw;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n  & h1 {\r\n    font-size: 1rem;\r\n  }\r\n  & h2 {\r\n    font-size: 0.75rem;\r\n  }\r\n`;\r\n","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\accessories\\constants.js",[],[],"C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\accessories\\Button.js",[],[],"C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\accessories\\Logo.js",[],[],"C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Posts\\SmallPostFormat.js",["132","133"],[],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { PostActions } from \"./Post_BuildingBlocks/PostActions\";\r\nimport { PostContent } from \"./Post_BuildingBlocks/PostContent\";\r\nimport { Avatar } from \"./Post_BuildingBlocks/Avatar\";\r\nimport { COLORS } from \"../../accessories/constants\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport { LoadingScreen } from \"../../accessories/LoadingScreen\";\r\nexport const SmallPostFormat = ({\r\n  id,\r\n  timestamp,\r\n  status,\r\n  media,\r\n  retweetFrom,\r\n  author,\r\n  displayName,\r\n  handle,\r\n  isLiked,\r\n  isRetweeted,\r\n  numLikes,\r\n  numRetweets,\r\n}) => {\r\n  // const author = id.author;\r\n  const history = useHistory();\r\n\r\n  // TO DO: make counter functional ⤵️\r\n  const [likes, setLikes] = useState(0);\r\n  const [liked, setLiked] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    console.log(\"you liked this!!\");\r\n    if (!liked) {\r\n      setLikes(likes + 1);\r\n      setLiked(!liked);\r\n    } else {\r\n      setLikes(likes - 1);\r\n      setLiked(!liked);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <SmallPostWrapper>\r\n        <div\r\n          onClick={(event) => {\r\n            event.stopPropagation();\r\n            history.push(`/tweet/${id}`);\r\n          }}\r\n        >\r\n          <User>\r\n            <Avatar author={author} />\r\n            <div\r\n              onClick={(event) => {\r\n                event.stopPropagation();\r\n                history.push(`/${author.handle}`);\r\n              }}\r\n            >\r\n              <h1>{author.displayName}</h1>\r\n              <h2>@{author.handle}</h2>\r\n            </div>\r\n            <h2>{timestamp}</h2>\r\n          </User>\r\n          <PostContent status={status} media={media} />\r\n        </div>\r\n        <PostActions\r\n          id={id}\r\n          likes={likes}\r\n          isLiked={isLiked}\r\n          handleClick={handleClick}\r\n        />\r\n      </SmallPostWrapper>\r\n      {/* )} */}\r\n    </>\r\n  );\r\n};\r\n\r\nconst SmallPostWrapper = styled.div`\r\n  border: 2px inset ${COLORS.black};\r\n  min-height: 25vh;\r\n  max-width: 100%;\r\n  gap: 1rem;\r\n  padding: 0.5rem 1rem 0.5rem 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  &&:hover {\r\n    cursor: pointer;\r\n    background-color: #00000080;\r\n    transition: background-color 2s ease;\r\n  }\r\n`;\r\nconst User = styled.div`\r\n  color: ${COLORS.offWhite4};\r\n  max-width: 100vw;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n  & h1 {\r\n    font-size: 1rem;\r\n  }\r\n  & h2 {\r\n    font-size: 0.75rem;\r\n  }\r\n`;\r\n","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Posts\\CreateNewPost.js",["134","135"],[],"import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { COLORS } from \"../../accessories/constants\";\r\nimport { NewPostActions } from \"./Post_BuildingBlocks/NewPostActions\";\r\nexport const CreateNewPost = ({ currentUserInfo, reload, setReload }) => {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const handleForm = (e) => {\r\n    e.preventDefault();\r\n\r\n    fetch(\"/api/tweet\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ status: value }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setReload(!reload);\r\n        setValue(\"\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"[ ERROR ]\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <CreatePost>\r\n      <CurrentUsersAvatar src={currentUserInfo.avatarSrc} />\r\n      <Form onSubmit={handleForm}>\r\n        <WhatsHappening\r\n          placeholder=\"What's Happening?\"\r\n          value={value}\r\n          onChange={(e) => setValue(e.target.value)}\r\n        />\r\n        <NewPostActions />\r\n        <FormSection>\r\n          <WarningMessage> WIP </WarningMessage>\r\n          <CharaCount>{250 - value.length}</CharaCount>\r\n          <Button\r\n            type=\"submit\"\r\n            disabled={value.length < 1 || value.length > 250}\r\n          >\r\n            click\r\n          </Button>\r\n        </FormSection>\r\n      </Form>\r\n    </CreatePost>\r\n  );\r\n};\r\nconst CreatePost = styled.div`\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  gap: 1rem;\r\n  margin-top: 4rem;\r\n  min-height: 25vh;\r\n  max-width: 100vw;\r\n  padding: 0.5rem 1rem 0.5rem 1rem;\r\n  background-color: ${COLORS.Black};\r\n`;\r\nconst CurrentUsersAvatar = styled.img`\r\n  float: left;\r\n  height: 4rem;\r\n  border-radius: 49%;\r\n  &&:hover {\r\n    filter: brightness(50%);\r\n    transition: 0.75s;\r\n  }\r\n`;\r\nconst WhatsHappening = styled.textarea`\r\n  border: 2px inset ${COLORS.black};\r\n  border-radius: 5px;\r\n  min-height: 6rem;\r\n  width: 100%;\r\n  background-color: ${COLORS.offBlack};\r\n  color: #fff;\r\n`;\r\nconst NavigationLink = styled(NavLink)`\r\n  height: 4rem;\r\n  width: 4rem;\r\n  float: left;\r\n  border-radius: 49%;\r\n`;\r\n\r\nconst CharaCount = styled.h2`\r\n  color: #fff;\r\n  &&.ok {\r\n    color: yellowgreen;\r\n  }\r\n  &&.warning {\r\n    color: yellow;\r\n  }\r\n  &&.error {\r\n    color: red;\r\n  }\r\n`;\r\nconst Form = styled.form`\r\n  height: 100%;\r\n  width: 100%;\r\n  flex: 1;\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n`;\r\nconst FormSection = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  gap: 2rem;\r\n`;\r\nconst WarningMessage = styled.h2`\r\n  color: #fff;\r\n`;\r\nconst Button = styled.button`\r\n  background-color: ${COLORS.orange};\r\n  color: ${COLORS.black};\r\n  border: none;\r\n  border-radius: 25px;\r\n  font-family: \"Trebuchet MS\";\r\n  font-size: 24px;\r\n  padding: 4px 8px 4px 8px;\r\n  margin: 4px;\r\n  &&:hover {\r\n    cursor: pointer;\r\n    color: ${COLORS.DeepOrange};\r\n  }\r\n`;\r\n","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Posts\\Post_BuildingBlocks\\PostContent.js",["136"],[],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { COLORS } from \"../../../accessories/constants\";\r\nexport const PostContent = (status) => {\r\n  const content = status.status;\r\n  const media = status.media;\r\n  return (\r\n    <ContentContainer>\r\n      {content}\r\n      <MediaWrapper>\r\n        {/* {media.map((image) => {\r\n          return <img src={image.url} />;\r\n        })} */}\r\n      </MediaWrapper>\r\n    </ContentContainer>\r\n  );\r\n};\r\nconst ContentContainer = styled.div`\r\n  width: 100%;\r\n  min-height: 5rem;\r\n  border: 2px inset ${COLORS.black};\r\n  background-color: ${COLORS.offBlack};\r\n  color: ${COLORS.offWhite3};\r\n  font-size: 1rem;\r\n  padding: 0.5rem;\r\n  gap: 1rem;\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst MediaWrapper = styled.div`\r\n  overflow: none;\r\n  max-height: 100%;\r\n  max-width: 100%;\r\n  overflow: hidden;\r\n  && > img {\r\n    height: 100%;\r\n    width: 100%;\r\n  }\r\n`;\r\n","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Posts\\Post_BuildingBlocks\\PostActions.js",["137"],[],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n// import { COLORS } from '../accessories/constants';\r\nimport {\r\n  TiPencil,\r\n  TiArrowRepeatOutline,\r\n  TiHeartOutline,\r\n  TiExportOutline,\r\n} from \"react-icons/ti\";\r\nimport { COLORS } from \"../../../accessories/constants\";\r\n\r\nexport const PostActions = ({ id, handleClick, likes, isLiked }) => {\r\n  return (\r\n    <ActionWrapper>\r\n      <Action>\r\n        <Comment>\r\n          <TiPencil />\r\n        </Comment>\r\n        0\r\n      </Action>\r\n\r\n      <Action>\r\n        <ReTweet>\r\n          <TiArrowRepeatOutline />\r\n        </ReTweet>\r\n        0\r\n      </Action>\r\n      <Action>\r\n        <Like className=\"like\" onClick={handleClick}>\r\n          <TiHeartOutline />\r\n        </Like>\r\n        {likes}\r\n      </Action>\r\n\r\n      <Action>\r\n        <Share>\r\n          <TiExportOutline />\r\n        </Share>\r\n        0\r\n      </Action>\r\n    </ActionWrapper>\r\n  );\r\n};\r\n\r\nconst ActionWrapper = styled.div`\r\n  border: 2px outset ${COLORS.DeepGreen};\r\n  min-height: 4vh;\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  width: 100%;\r\n  background-color: ${COLORS.black};\r\n`;\r\nconst Action = styled.div`\r\n  min-height: 4vh;\r\n  flex: 1;\r\n  margin: 0;\r\n  padding: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  && > div {\r\n    color: #000;\r\n    height: 2.5rem;\r\n    width: 2.5rem;\r\n    box-shadow: inset 0 0 10px ${COLORS.deepTangerine};\r\n    border: 2px solid ${COLORS.DeepOrange};\r\n    display: flex;\r\n    margin: 0.2em;\r\n    border-radius: 5rem;\r\n    background-color: ${COLORS.tangerine};\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  && > div:hover {\r\n    background-color: ${COLORS.deepTangerine};\r\n    box-shadow: inset 0 0 10px ${COLORS.DeepOrange};\r\n    border: 2px solid ${COLORS.DeepOrange};\r\n    color: ${COLORS.offWhite};\r\n    cursor: pointer;\r\n  }\r\n`;\r\nconst Comment = styled.div`\r\n  &&:hover {\r\n    color: ${COLORS.DeepGreen};\r\n  }\r\n`;\r\nconst ReTweet = styled.div`\r\n  &&:hover {\r\n    color: ${COLORS.BrightGreen};\r\n  }\r\n`;\r\nconst Like = styled.div`\r\n  &&:hover {\r\n    color: ${COLORS.orange};\r\n  }\r\n  &&.liked {\r\n    background-color: ${COLORS.deepTangerine};\r\n    box-shadow: inset 0 0 10px ${COLORS.DeepOrange};\r\n    border: 2px solid ${COLORS.DeepOrange};\r\n    color: ${COLORS.offWhite};\r\n  }\r\n`;\r\nconst Share = styled.div`\r\n  &&:hover {\r\n    color: ${COLORS.DeepOrange};\r\n  }\r\n`;\r\n","C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Posts\\Post_BuildingBlocks\\Avatar.js",[],[],"C:\\Users\\sbrim\\OneDrive\\Documents\\GitHub\\critter\\src\\components\\Posts\\Post_BuildingBlocks\\NewPostActions.js",[],[],{"ruleId":"138","severity":1,"message":"139","line":1,"column":29,"nodeType":"140","messageId":"141","endLine":1,"endColumn":38},{"ruleId":"138","severity":1,"message":"142","line":1,"column":40,"nodeType":"140","messageId":"141","endLine":1,"endColumn":48},{"ruleId":"138","severity":1,"message":"143","line":2,"column":50,"nodeType":"140","messageId":"141","endLine":2,"endColumn":54},{"ruleId":"138","severity":1,"message":"144","line":15,"column":3,"nodeType":"140","messageId":"141","endLine":15,"endColumn":18},{"ruleId":"138","severity":1,"message":"145","line":18,"column":10,"nodeType":"140","messageId":"141","endLine":18,"endColumn":25},{"ruleId":"146","severity":1,"message":"147","line":21,"column":6,"nodeType":"148","endLine":21,"endColumn":8,"suggestions":"149"},{"ruleId":"138","severity":1,"message":"150","line":3,"column":10,"nodeType":"140","messageId":"141","endLine":3,"endColumn":17},{"ruleId":"138","severity":1,"message":"151","line":1,"column":17,"nodeType":"140","messageId":"141","endLine":1,"endColumn":27},{"ruleId":"138","severity":1,"message":"152","line":5,"column":3,"nodeType":"140","messageId":"141","endLine":5,"endColumn":19},{"ruleId":"138","severity":1,"message":"153","line":7,"column":3,"nodeType":"140","messageId":"141","endLine":7,"endColumn":9},{"ruleId":"138","severity":1,"message":"154","line":8,"column":3,"nodeType":"140","messageId":"141","endLine":8,"endColumn":9},{"ruleId":"138","severity":1,"message":"155","line":12,"column":10,"nodeType":"140","messageId":"141","endLine":12,"endColumn":28},{"ruleId":"138","severity":1,"message":"156","line":126,"column":7,"nodeType":"140","messageId":"141","endLine":126,"endColumn":19},{"ruleId":"138","severity":1,"message":"151","line":1,"column":17,"nodeType":"140","messageId":"141","endLine":1,"endColumn":27},{"ruleId":"138","severity":1,"message":"150","line":8,"column":10,"nodeType":"140","messageId":"141","endLine":8,"endColumn":17},{"ruleId":"138","severity":1,"message":"150","line":8,"column":10,"nodeType":"140","messageId":"141","endLine":8,"endColumn":17},{"ruleId":"138","severity":1,"message":"157","line":9,"column":10,"nodeType":"140","messageId":"141","endLine":9,"endColumn":23},{"ruleId":"138","severity":1,"message":"139","line":1,"column":17,"nodeType":"140","messageId":"141","endLine":1,"endColumn":26},{"ruleId":"138","severity":1,"message":"158","line":80,"column":7,"nodeType":"140","messageId":"141","endLine":80,"endColumn":21},{"ruleId":"138","severity":1,"message":"159","line":6,"column":9,"nodeType":"140","messageId":"141","endLine":6,"endColumn":14},{"ruleId":"138","severity":1,"message":"142","line":1,"column":17,"nodeType":"140","messageId":"141","endLine":1,"endColumn":25},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Link' is defined but never used.","'HomeFeedContext' is defined but never used.","'LargePostFormat' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tweetId'. Either include it or remove the dependency array.","ArrayExpression",["160"],"'NavLink' is defined but never used.","'useContext' is defined but never used.","'TiArrowLeftThick' is defined but never used.","'TiLink' is defined but never used.","'TiGift' is defined but never used.","'CurrentUserContext' is defined but never used.","'ReturnButton' is assigned a value but never used.","'LoadingScreen' is defined but never used.","'NavigationLink' is assigned a value but never used.","'media' is assigned a value but never used.",{"desc":"161","fix":"162"},"Update the dependencies array to be: [tweetId]",{"range":"163","text":"164"},[834,836],"[tweetId]"]